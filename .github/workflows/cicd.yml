# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Devcrew CICD

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
    types: [closed]


permissions:
  contents: read

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3.1.0


      - name: create resources directory
        run: mkdir -p ./src/main/resources
        shell: bash

      - name: create application-prod.yml
        if: contains(github.ref, 'dev')
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.PROD_YML }}" > ./application-prod.yml
        shell: bash
        

      - name: create application-prod.yml
        if: contains(github.ref, 'dev')
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.PROD_YML }}" > ./application-prod.yml
        shell: bash



      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper (without tests)
        run: ./gradlew build -x test

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.5.0

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/devcrewserver:latest --push .
  

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create SSH key file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem



      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << EOF
            echo "Listing all Docker containers:"
            sudo docker ps -a
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/devcrewserver:latest
            sudo docker stop devcrewserver || true
            sudo docker rm devcrewserver || true
            sudo docker run -d --name devcrewserver -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/devcrewserver:latest
          EOF

